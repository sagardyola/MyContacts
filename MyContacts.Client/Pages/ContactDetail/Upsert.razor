@page "/contacts/create"
@page "/contacts/edit/{id:int}"


@inject IContactDetailService _contactDetailService
@inject NavigationManager _navigationManager

<h3>@Title a Contact</h3>
@if (IsLoading)
{
	<h4>Loading....</h4>
}
else
{
	<EditForm Model="Contact" OnValidSubmit="UpsertContact">
	<DataAnnotationsValidator />
	<ValidationSummary />
	<div class="form-group">
		<label>Username</label>
		<InputText @bind-Value="Contact.UserName" class="form-control"></InputText>
		<ValidationMessage For="() => Contact.UserName"></ValidationMessage>
	</div>
		<div class="form-group">
		<label>First Name</label>
		<InputText @bind-Value="Contact.FirstName" class="form-control"></InputText>
		<ValidationMessage For="() => Contact.FirstName"></ValidationMessage>
	</div>
		<div class="form-group">
		<label>Last name</label>
		<InputText @bind-Value="Contact.LastName" class="form-control"></InputText>
		<ValidationMessage For="() => Contact.LastName"></ValidationMessage>
	</div>

	<div class="form-group">
		<label>MobileNumber</label>
		<InputText @bind-Value="Contact.MobileNumber" class="form-control"></InputText>
		<ValidationMessage For="() => Contact.MobileNumber"></ValidationMessage>
	</div>

	<div class="form-group">
		<label>Address1</label>
		<InputText @bind-Value="Contact.Address1" class="form-control"></InputText>
		<ValidationMessage For="() => Contact.Address1"></ValidationMessage>
	</div>

	<div class="form-group">
		<label>Address2</label>
		<InputText @bind-Value="Contact.Address2" class="form-control"></InputText>
		<ValidationMessage For="() => Contact.Address2"></ValidationMessage>
	</div>

	<div class="form-group">
		<label>Notes</label>
		<InputText @bind-Value="Contact.Notes" class="form-control"></InputText>
		<ValidationMessage For="() => Contact.Notes"></ValidationMessage>
	</div>

	<div class="form-group">
		<button class="btn btn-primary">@Title</button>
		<NavLink href="contacts" class="btn btn-secondary">Back to Contacts</NavLink>
	</div>
</EditForm>
}


@code {
	[Parameter]
	public int ID { get; set; }
	private ContactDetailDTO Contact { get; set; } = new ContactDetailDTO();
	private string Title { get; set; } = "Create";

	public bool IsLoading { get; set; } = true;

	protected override async Task OnInitializedAsync()
	{
		if (ID == 0)
		{
			IsLoading = false;
		}
		else
		{
			Title = "Update";
			await Task.Run(LoadContact);
		}
	}

	private async Task LoadContact()
	{
		Contact = await _contactDetailService.Get(ID);
		IsLoading = false;
	}

	private async void UpsertContact()
	{
		if (Contact.ID == 0)
		{
			await _contactDetailService.Create(Contact);
		}
		else
		{
			await _contactDetailService.Edit(Contact);
		}
			_navigationManager.NavigateTo("contacts");


	}
}
