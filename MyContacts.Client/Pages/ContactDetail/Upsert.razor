@page "/contacts/create"
@page "/contacts/edit/{id:int}"
@using MyContacts.Models.ContactInformationDTO

@inject IContactDetailService _contactDetailService
@inject ILabelService _labelService
@inject NavigationManager _navigationManager

<h3>@Title a Contact</h3>

@if (IsLoading)
{
	<h4>Loading....</h4>
}
else
{
	<EditForm Model="Contact" OnValidSubmit="UpsertContact">
	<DataAnnotationsValidator />
	<ValidationSummary />
	<div class="form-group">
		<label>First Name</label>
		<InputText @bind-Value="Contact.FirstName" class="form-control"></InputText>
		<ValidationMessage For="() => Contact.FirstName"></ValidationMessage>
	</div>
	<div class="form-group">
		<label>Last name</label>
		<InputText @bind-Value="Contact.LastName" class="form-control"></InputText>
		<ValidationMessage For="() => Contact.LastName"></ValidationMessage>
	</div>

	<div class="form-group">
		<label>Label</label>
		<InputSelect @bind-Value="Contact.LabelId" class="form-control">
			@foreach (var _label in Labels)
			{
				<option value="@_label.Id">@_label.Title</option>
			}
		</InputSelect>
		<ValidationMessage For="() => Contact.LabelId"></ValidationMessage>
	</div>

	<div class="form-group">
		<label>Address</label>
		<InputText @bind-Value="Contact.Address" class="form-control"></InputText>
		<ValidationMessage For="() => Contact.Address"></ValidationMessage>
	</div>

	<div class="form-group">
		<label>Notes</label>
		<InputText @bind-Value="Contact.Notes" class="form-control"></InputText>
		<ValidationMessage For="() => Contact.Notes"></ValidationMessage>
	</div>

	<div class="form-group">
		<label>Image</label>
		<InputText @bind-Value="Contact.Image" class="form-control"></InputText>
		<ValidationMessage For="() => Contact.Image"></ValidationMessage>
	</div>

	<div class="form-group">
		<button class="btn btn-primary">@Title</button>
		<NavLink href="contacts" class="btn btn-secondary">Back to Contacts</NavLink>
	</div>
</EditForm>
}


@code {
	[Parameter]
	public int ID { get; set; }
	private ContactDetailDTO Contact { get; set; } = new ContactDetailDTO();
	private IEnumerable<LabelDTO> Labels { get; set; } = new List<LabelDTO>();
	private string Title { get; set; } = "Create";
	public bool IsLoading { get; set; }

	protected override async Task OnInitializedAsync()
	{
		Labels = await _labelService.GetAll();
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if(firstRender){
			if (ID == 0)
			{
				IsLoading = false;
			}
			else
			{
				Title = "Update";
				await LoadContact();
			}
		}
	}

	private async Task LoadContact()
	{
		IsLoading = true;
		StateHasChanged();
		Contact = await _contactDetailService.Get(ID);
		IsLoading = false;
		StateHasChanged();
	}

	private async void UpsertContact()
	{
		if (Contact.Id == 0)
		{
			await _contactDetailService.Create(Contact);
		}
		else
		{
			await _contactDetailService.Edit(Contact);
		}
		_navigationManager.NavigateTo("contacts");
	}
}
