@page "/labels/create"
@page "/labels/edit/{id:int}"
@using MyContacts.Models.ContactInformationDTO

@inject ILabelService _labelService
@inject NavigationManager _navigationManager

<h3>@Title a Contact</h3>

@if (IsLoading)
{
	<h4>Loading....</h4>
}
else
{
	<EditForm Model="Label" OnValidSubmit="UpsertLabel">
	<DataAnnotationsValidator />
	<ValidationSummary />
	<div class="form-group">
		<label>Label Name</label>
		<InputText @bind-Value="Label.Title" class="form-control"></InputText>
		<ValidationMessage For="() => Label.Title"></ValidationMessage>
	</div>
	<div class="form-group">
		<button class="btn btn-primary">@Title</button>
		<NavLink href="labels" class="btn btn-secondary">Back to Labels</NavLink>
	</div>
</EditForm>
}


@code {
	[Parameter]
	public int ID { get; set; }
	private LabelDTO Label { get; set; } = new LabelDTO();
	private string Title { get; set; } = "Create";
	public bool IsLoading { get; set; }

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if(firstRender){
			if (ID == 0)
			{
				IsLoading = false;
			}
			else
			{
				Title = "Update";
				await LoadLabels();
			}
		}
	}

	private async Task LoadLabels()
	{
		IsLoading = true;
		StateHasChanged();
		Label = await _labelService.Get(ID);
		IsLoading = false;
		StateHasChanged();
	}

	private async void UpsertLabel()
	{
		if (Label.Id == 0)
		{
			await _labelService.Create(Label);
		}
		else
		{
			await _labelService.Edit(Label);
		}
		_navigationManager.NavigateTo("labels");
	}
}