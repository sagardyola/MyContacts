@page "/labels"
@using MyContacts.Models.ContactInformationDTO
@inject ILabelService _labelService
@inject IJSRuntime _jsRuntime


<_DeleteConfirmation IsParentComponentProcessing="IsLoading" ConfirmationChanged="ConfirmDelete_Click"></_DeleteConfirmation>
<h3>Labels</h3>
<a href="labels/create" class="btn btn-primary">Add a new Label</a>


@if (Labels.Any())
{
	<table class="table table-striped">
		<thead>
			<tr>
				<th scope="col">Label</th>
				<th scope="col">Actions</th>
			</tr>
			</thead>
			<tbody>
				@foreach(var label in Labels)
				{
					<tr>
						<td>@label.Title</td>
						<td>
							<NavLink href="@($"labels/edit/{label.Id}")" class="btn btn-primary">Edit</NavLink>
							<button class="btn btn-danger" @onclick="() => HandleDelete(label.Id)">Delete</button>
						</td>
					</tr>
				}	
			</tbody>
	</table>
}
else
{
	if (IsLoading)
	{
		<h4>Loading</h4>
	}
	else
	{
		<h4>No labels found</h4>
	}
}


@code {
	public IEnumerable<LabelDTO> Labels = new List<LabelDTO>();
	public bool IsLoading { get; set; }
	private int DeleteLabelId { get; set; } = 0;

	protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadLabels();
        }
    }

	private async Task LoadLabels()
	{
		IsLoading=true;
        StateHasChanged();
		Labels = await _labelService.GetAll();
		IsLoading = false;
        StateHasChanged();
	}

	private void HandleDelete(int Id)
    {
        DeleteLabelId=Id;
        _jsRuntime.InvokeVoidAsync("ShowDeleteConfirmationModal");
    }

    public async Task ConfirmDelete_Click(bool isConfirmed)
    {
        IsLoading=true;
        if(isConfirmed && DeleteLabelId!=0)
        {
            //delete
            await _labelService.Delete(DeleteLabelId);
            await LoadLabels();
            await _jsRuntime.InvokeVoidAsync("HideDeleteConfirmationModal");
        }
        IsLoading=false;
    }
}
